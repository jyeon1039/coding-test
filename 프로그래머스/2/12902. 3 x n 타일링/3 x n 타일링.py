def solution(n):
    answer = 0
    
    n //= 2 # 홀수는 고려하지 않는다
    dp = [0] * (n+1)
    dp[1] = 3 # f(2) = 3
    dp[2] = 11 # f(4) = 11
    
    ''' 
    f(n) = f(n-1)*3 + f(n-2)*2 + ... + f(2)*2 + 2
        
    부가설명)
    f(n-1) => f(2) 의 경우의 수이다. 따라서 3을 곱한다
    f(n-2) => f(n-1) 에 이상한 모양(테스트케이스에서 마지막 2개와 같은 모양) 을 더해준 것이고, 이상한 모양은 f(n-1)에 가로 2개를 가운데에 넣어준 모양으로, 모든 수마다 2개씩 가지고 있다. 따라서 f(n-1) 에 2를 곱한다
    f(n-3) => f(n-2) 에 이상한 모양의 경우의 수 2를 곱한다
    ...
    마지막으로 자신이 가지는 이상한 모양 경우의 수 2를 곱한다
    '''
    
    for i in range(3, n+1):
        dp[i] = (3*dp[i-1] + 2*sum(dp[:i-1]) + 2) 
        
    return dp[n] % 1000000007